use std::{
    ffi::{CStr, OsString},
    os::unix::prelude::OsStrExt,
    path::Path,
};

use userland_execve_rust::exec;

fn get_path_args() -> (OsString, Vec<OsString>) {
    let mut main_args = std::env::args_os();
    main_args.next();
    let path = main_args.next().unwrap();
    let args = main_args.collect::<Vec<OsString>>();
    (path, args)
}

fn get_env() -> Vec<OsString> {
    std::env::vars_os()
        .map(|(key, val)| {
            [key, OsString::from("="), val]
                .into_iter()
                .collect::<OsString>()
        })
        .collect()
}

fn os_strings_to_c_strs(os_strings: &[OsString]) -> Vec<&CStr> {
    os_strings
        .iter()
        .map(|s| CStr::from_bytes_with_nul(s.as_bytes()).unwrap())
        .collect()
}

fn main() {
    let (path, args) = get_path_args();
    let args = os_strings_to_c_strs(&args);
    let env = get_env();
    let env = os_strings_to_c_strs(&env);
    exec(Path::new(&path), &args, &env)
}
