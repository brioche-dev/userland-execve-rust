use std::{
    ffi::{CStr, CString},
    iter::once,
    os::unix::prelude::OsStrExt,
    path::Path,
};

fn path_to_c_string(path: &Path) -> CString {
    CString::from_vec_with_nul(
        path.as_os_str()
            .as_bytes()
            .iter()
            .copied()
            .chain(once(0))
            .collect(),
    )
    .unwrap()
}

pub fn exec(path: &Path, args: &[impl AsRef<CStr>], env: &[impl AsRef<CStr>]) -> ! {
    let elf = std::fs::read(path).unwrap();
    let ((bin_load_addr, bin_header_2), opt_interp) = crate::loader::load(&elf);
    let path = path_to_c_string(path);
    let sp = crate::stack::make_stack(bin_load_addr, &path, args, env, bin_header_2);
    let entry = match opt_interp {
        Some((interp_load_addr, interp_entry)) => interp_load_addr + interp_entry,
        None => {
            let bin_entry: usize = bin_header_2.entry_point().try_into().unwrap();
            bin_load_addr + bin_entry
        }
    };
    unsafe { crate::run::run(sp, entry) }
}
