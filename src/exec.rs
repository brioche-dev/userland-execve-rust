use std::{
    ffi::{CStr, CString},
    iter::once,
    os::unix::prelude::OsStrExt,
    path::Path,
};

fn path_to_c_string(path: &Path) -> CString {
    CString::from_vec_with_nul(
        path.as_os_str()
            .as_bytes()
            .iter()
            .copied()
            .chain(once(0))
            .collect(),
    )
    .unwrap()
}

pub fn exec(path: &Path, args: &[impl AsRef<CStr>], env: &[impl AsRef<CStr>]) -> ! {
    let (bin_info, opt_interp_info) = crate::loader::load(path);
    let path = path_to_c_string(path);
    let sp = crate::stack::make_stack(bin_info, &path, args, env);
    let entry = match opt_interp_info {
        Some(interp_info) => {
            let interp_entry: usize = interp_info.entry_point.try_into().unwrap();
            interp_info.load_addr + interp_entry
        }
        None => {
            let bin_entry: usize = bin_info.entry_point.try_into().unwrap();
            bin_info.load_addr + bin_entry
        }
    };
    unsafe { crate::run::run(sp, entry) }
}
